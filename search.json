[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Big Book of MLOps",
    "section": "",
    "text": "Preface\nMLOps is a big field. I work in MLOps and spend a lot of time learning things. Unfortunately my brain can only store so much information, and it’s easy to forget stuff.\nThis book is a repository of the knowledge I’ve learned since starting in MLOps. The content can roughly be divided into these categories:\n\nShort summaries of topics with links to articles that explain things nicely\nNotes I’ve taken from video courses (I find these the most time consuming and attention hungry. Taking notes mean I only sit through them once)\nUseful hints from technical books I’ve read",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "kubernetes-networking.html",
    "href": "kubernetes-networking.html",
    "title": "Networking in Kubernetes (in progress)",
    "section": "",
    "text": "Notes from Certified Kubernetes Administrator (CKA) with Practice Tests",
    "crumbs": [
      "Networking in Kubernetes (in progress)"
    ]
  },
  {
    "objectID": "kubernetes-networking.html#notes-from-certified-kubernetes-administrator-cka-with-practice-tests",
    "href": "kubernetes-networking.html#notes-from-certified-kubernetes-administrator-cka-with-practice-tests",
    "title": "Networking in Kubernetes (in progress)",
    "section": "",
    "text": "Pre-requisites on networking\n\nHow can computers talk to each other on a network?\n\nIn a simple network, two computers (let’s call them A and B) can exchange information over a network\nThis communication is transmitted via a network switch, a piece of equipment that can connect IT devies. Network siwtches can vary in speed (e.g gigabytes per second).\nA computer sends information to the switch via an interface. This interface can be a piece of hardware or software depending on the situation, but is essentially a point of connection between the device and the network\nOn linux, running ip link will print a list of interfaces in the terminal\nIf we assume the network has an ip address of 192.165.1.0, we could add ip addresses to A and B with ip addr add, e.g. ip addr add 192.165.1.10/24 dev eth0 on A and ip addr add 192.165.1.11/24 dev eth0 on B. Note: Here, dev stands for device and eth0 is the first ethernet interface on the system.\nThis would mean that A and B can now exchange packets with each other. Packets are small segments of a larger piece of information being sent over the network, which are recombined by the device that receives them.\n\n\n\nRouting\n\nA router helps connect different networks\nThe router is visible to each network with a different ip address\nNetworks are configured with gateways which connects two different networks\nThe route command in Linux will print the routing table\nRoutes can be added using ip route add\nLet’s assume this network setup:\n\nA and B exist on network 192.165.1.0 - we’ll call this network 1\nC and D exist on network 192.165.2.0 - we’ll call this network 2\nA router is connected to network 1 via the ip 192.165.1.1, and connected to network 2 via the ip 192.165.2.1\n\nWe can connect device A to network 2 by running ip route add 192.165.2.0/24 via 192.165.1.1\nRunning route shows that the router is now a gateway to network 2\nYou can set default routes instead of adding an entry for every single network - ip route add default via 192.165.1.1 - default is sometimes seen as ‘0.0.0.0’\nLinux servers can act as hosts themselves but packet forwarding between interfaces needs to be enabled. This can be a security threat if one interface connects to a public network and the other to a private network.\n\n\n\nDomain Name Systems (DNS)\n\nIn a small simple network (let’s use A and B again, connected via a switch), we can give names to each device. I can add an entry in the /etc/hosts file of A:\n\n192.165.1.11    myname\n\nI can now run ping myname to check connectivity to computer B. However, A will not actually check that B’s host name is myname. And this would quickly become impossible as the network grew\nAn internal DNS server solves the problem - it is a server containing a single source of truth\nIf we assume the DNS server’s ip address is 192.165.1.100, an entry in A’s /etc/resolv.conf file tells it where to resolve domain names:\n\nnameserver  192.165.1.100\n\nA DNS functions like an internet phonebook. Domain names are linked to IP addresses - it means humans don’t need to memorise long IP addresses\nDomain names are strings pointing to a specific web services\nA domain name is usually comprised of several elements - e.g. www.google.com can be broken down to:\n\n.com - top level domain (other examples are .edu, .org, .io) - can be a sign of the intent of the server e.g. .edu is for educational institutions, .org for non-profit\ngoogle - the second level domain\nwww - a subdomain (other google examples could be mail or maps)\n\nThere are DNS servers on the internet that are searched to find the ip address of the server that is hosting the web application\nip addresses can be cached by browsers to speed up subsequent requests\nDNS can contain records:\n\nA records - map ip addresses to hostnames\nAAAA (quad A) records - map IPv6 to hostnames\nCNAME (canonical name) - map one name to another e.g. if flowers.example.com had a CNAME record with a value of example.com, a lookup of “flowers.example.com” provies the ip address of “example.com”, which is the canonical name\n\n\n\n\n\nNetwork Namespaces in Linux\nA Linux installation generally shares a single set of network interfaces and routing table entries, but you can create isolated networks within that server. This article by Scott Lowe goes into some detail about how to set up a network namespace on Ubuntu.\nThe CKA course on Udemy goes into more detail about creating a virtual network with namespaces and virtual switches:\n\nThere are different options for the network switch including Linux Bridge and Open vSwitch - below we’ll use Linux Bridge\nRun the command ip link add v-net-0 type bridge on the host - to create a new interface (run ip link to see it) - you’ll also need to turn it up using ip link set dev v-net-0 up\nNext, to connect a namespace to the switch, you’ll need a virtual cable. Let’s assume we are connecting namespace red to the virtual switch:\n\nUse ip link add veth-red type veth peer name veth-red-br to create the cable\nUse ip link set veth-red netns red\nUse ip link set veth-red-br master v-net-0\nFinally, assign ip addresses to the namespace interface E.g. ip -n red addr add 192.165.15.1/24 dev veth-red\n\nTo allow the virtual network to reach networks outside itself:\n\nwe add an ip address to the virtual interface e.g. ip addr add 192.165.15.5/24 dev v-net-0\nin a given namespace (e.g. red) - add a gateway. ip netns exec red ip route add 192.165.1.0/24 via 192.165.15.5 - our host is now the gateway (also do this for default)\nadd a rule in iptables on host to mask requests coming from the virtual network with its own ip address - iptable -t nat -A POSTROUTING -s 192.165.15.0/24 -j MASQUERADE\n\nAllowing requests to be made to a service in the virtual network from outside the host would require port forwarding with iptables\nNOTE: There were some omissions from the video - fortunately the Q&A for the video had the solution:\n\n# Add a bridge interface\n# It's like an interface for the host and a switch for namespaces!\nip link add v-net-0 type bridge\n# Bring it up\nip link set dev v-net-0 up\n# Add namespaces\nip netns add red\nip netns add blue\nip netns add green\nip netns add yellow\n# Create a virtual cable for namespace and bridge\nip link add veth-red type veth peer name veth-red-br\nip link add veth-blue type veth peer name veth-blue-br\nip link add veth-green type veth peer name veth-green-br\nip link add veth-yellow type veth peer name veth-yellow-br\n# Connect one end of virtual cable to namespace red\nip link set veth-red netns red\nip link set veth-blue netns blue\nip link set veth-green netns green\nip link set veth-yellow netns yellow\n# Connect virtual cable to the bridge\nip link set veth-red-br master v-net-0\nip link set veth-blue-br master v-net-0\nip link set veth-green-br master v-net-0\nip link set veth-yellow-br master v-net-0\n# Assign IPs to these interfaces\nip -n red addr add 192.168.15.2/24 dev veth-red\nip -n blue addr add 192.168.15.3/24 dev veth-blue\nip -n green addr add 192.168.15.4/24 dev veth-green\nip -n yellow addr add 192.168.15.5/24 dev veth-yellow\n# Bring interfaces up\nip -n red link set veth-red up\nip -n blue link set veth-blue up\nip -n green link set veth-green up\nip -n yellow link set veth-yellow up\n# Bring interfaces (bridge) up\nip link set veth-red-br up\nip link set veth-blue-br up\nip link set veth-green-br up\nip link set veth-yellow-br up\n# Bring loopback interfaces up (for 192.168.15.0)\nip -n red link set lo up\nip -n blue link set lo up\nip -n green link set lo up\nip -n yellow link set lo up\n\n\nContainer Network Interfaces\n\nCNI plugins are required for implementing the Kubernetes network model\nCNI is a Cloud Native Computing Foundation (CNCF) project which defines specifications for network plugins, specifically dealing with connectivity of containers and removing allocated resources when a container is deleted\nAn example plugin is the bridge plugin which connects a container to a virtual switch (the bridge) in the host network. A veth pair is generated which connects the container to the bridge. The container end is assigned an IP address. An IP address can also be assigned to the bridge itself, making it a gateway for the container.\nTo check network interface configured for cluster connectivity on a node, ip address and check “inet” value. MAC address can be found in the same place\nTo find the bridge created by the CRI on a node, run ip address or ip address show type bridge\nThe state of an interface can also be found using ip address\nTo find the default gateway on host, use ip route\nTo find which port kube-scheduler is listening on, use netstat -npl | grep -i scheduler:\n\nn = don’t resolve name, p = display pid info, l = display listening server sockets\n\nTo get etcd ports and count connections, netstat -npa | grep etcd | grep &lt;port-number&gt; | wc -l\n\na = display all sockets\n\n\n\n\nPod Networking\n\nK8s does not come with in-built pod networking\nThe K8s network model requires that:\n\npods have their own private network namespace (containers can reference each other via localhost)\npods have IP addresses\npods can communicate with other pods on the same node\npods can communicate with other pods on different nodes without proxies or address translation (NAT)\n\nThe ip address range applied to pods can be found by looking at the pod logs of the CNI plugin and looking for “ipalloc-range”\n\n\n\nService Networking\n\nA service is an abstraction in K8s which enables the exposure of multiple pods via a single address. These pods are usually determined with label selectors.\nServices are assigned an IP address from a pre-determined range, which should differ from the range defined for pods\nRouting rules are configured using the kube-proxy component. The process for new services or endpoints (using internal only ClusterIP) looks like this:\n\nkube-apiserver communicates the change to the kube-proxy\nkube-proxy creates rules via NAT inside a node - these are mappings from service IP and port to pod IP and port\n\nNewly created DNAT rules can be viewed in /var/log/kube-proxy.log files",
    "crumbs": [
      "Networking in Kubernetes (in progress)"
    ]
  },
  {
    "objectID": "kubernetes-networking.html#notes-from-online-articles",
    "href": "kubernetes-networking.html#notes-from-online-articles",
    "title": "Networking in Kubernetes (in progress)",
    "section": "Notes from online articles",
    "text": "Notes from online articles\n\nProxies and Reverse Proxies\nProxies (also called forward proxies) are intermediary servers that intercept client requests. A proxy might be implemented in an organisation to do things like block restricted content. Meanwhile, reverse proxies sit in front of servers and accept requests coming over the internet. They can provide functions such as load balancing and SSL encryption/decryption. The article What is a reverse proxy? by CloudFlare provides a good overview of these concepts. NGINX is a popular reverse proxy - this introduction to NGINX provides a nice practical demonstration of its abilities.",
    "crumbs": [
      "Networking in Kubernetes (in progress)"
    ]
  },
  {
    "objectID": "kubernetes-networking.html#resources",
    "href": "kubernetes-networking.html#resources",
    "title": "Networking in Kubernetes (in progress)",
    "section": "Resources",
    "text": "Resources\nSome of the other resources I used to understand networking basics:\n\nWhat is a network switch? by Juniper Networks\nWhat is computer networking? by AWS\nWhat is a network gateway? by NordLayer\nWhat is a DNS CNAME record? by CloudFlare",
    "crumbs": [
      "Networking in Kubernetes (in progress)"
    ]
  }
]